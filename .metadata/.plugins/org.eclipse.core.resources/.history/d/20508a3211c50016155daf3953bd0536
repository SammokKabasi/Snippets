package com.leetcode.threesum;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

public class Solution {
	public List<List<Integer>> threeSum(int[] nums) {
		HashSet<List<Integer>> set = new HashSet<>();

		HashMap<Integer, Integer> map = new HashMap<>();
		// create a hashmap with the nums
		for (int num : nums) {
			Integer rep = map.get(num);
			if (rep == null) {
				map.put(num, 1);
			} else {
				map.put(num, ++rep);
			}
		}
		System.out.println(map);
		for (int i = 0; i< nums.length; i++) {
			for(int j = i; i<nums.length; i++) {
				int diff = 0-(nums[i]+nums[j]);
				if(map.get(diff)!=null) {
					//if 2 are the same and 1 is different
					ArrayList<Integer> res = new ArrayList<>();
					res.add(nums[i]);
					res.add(nums[j]);
					res.add(diff);
					Collections.sort(res);
					set.add(res);
				}
			}
		}
		return new ArrayList<>(set);
	}

	public static void main(String[] args) {
		int[] ints = { -1, 0, 1, 2, -1, -4 };
		System.out.println(new Solution().threeSum(ints));
	}
}
