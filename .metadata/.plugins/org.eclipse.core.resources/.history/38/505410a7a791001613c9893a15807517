package com.synacor.squirrel;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Main {

	static String SQUIRREL_FILE = "home/squirrel/squirrel-info";
	static String ACCORN_FILE = "home/squirrel/accorn-info";

	public static void main(String[] args) {
		// TODO accept squirrel user input
		new Main().run();
	}

	public void run() {
		System.out.println(
				"Squirrel, identify yourself (no typos please)! Describe your tail, ears, fur, gender respectively (in the same line).");
		String input = acceptInput();
		String squirrel = null;

		// check if squirrel info is present
		if (new File(SQUIRREL_FILE).exists()) {
			ArrayList<String> list = readFile(SQUIRREL_FILE);

			// read all the inputs from squirrel file
			for (String squirrel_ : list) {
				if (squirrel_.contains(input.trim().toUpperCase())) {
					System.out.println("We found your record. Welcome back, squirrel.");
					squirrel = squirrel_;
					break;
				}
			}
			if (squirrel == null) {
				squirrel = input.trim().toUpperCase();
				System.out.println(
						"Squirrel, we do not have your record. We are going to generate a new record for you.");
				appendToFile(SQUIRREL_FILE, input.trim().toUpperCase());
			}

		} else {
			squirrel = input.trim().toUpperCase();
			System.out.println("Squirrel, we do not have your record. We are going to generate a new record for you.");
			createFile(SQUIRREL_FILE);
			appendToFile(SQUIRREL_FILE, input.trim().toUpperCase());
		}

		// Acorn stuff now

		System.out.println("Do you want to \n\t1. Store acorn address " + "\n\t2. Retrieve previously saved specific acorn address"
				+ "\n\t3. View all my acorns(without deleting any)");
		input = acceptInput();
		if (input.trim().equalsIgnoreCase("1")) {
			System.out.println("Storing new accorn information. Enter acorn info (smoothness, taste)");
			String input1 = acceptInput();
			System.out.println("Input the address (street, avenue)");
			String input2 = acceptInput();

			while (!(Integer.parseInt(input2.trim().split(",")[0]) >= 59
					&& Integer.parseInt(input2.trim().split(",")[0]) <= 110)) {
				System.out.println("Invalid street! Try again...");
				System.out.println("Input the address (street, avenue)");
				input2 = acceptInput();
			}
			while (!(Integer.parseInt(input2.trim().split(",")[1]) >= 5
					&& Integer.parseInt(input2.trim().split(",")[1]) <= 8)) {
				System.out.println("Invalid avenue! Try again...");
				System.out.println("Input the address (street, avenue)");
				input2 = acceptInput();
			}

			appendToFile(ACCORN_FILE, (input1 + ";" + input2 + ";" + squirrel).trim().toUpperCase());
			System.out.println("Stored acorn info! " + (input1 + ";" + input2 + ";" + squirrel).trim().toUpperCase());

		} else if (input.trim().equalsIgnoreCase("2")) {
			System.out.println("Enter the accorn information (smoothness, taste) and we'll retrieve the address (and delete the acorn from records.");
			String input1 = acceptInput();
			input1 = input1.toUpperCase().trim();
			// read all the inputs from accorn file
			ArrayList<String> strings = readFile(ACCORN_FILE);

			String string = null;
			ArrayList<String> stealList= new ArrayList<>();
			for (String string_ : strings) {
				if (string_.contains(input1)) {
					String address = string_.split(";")[1];
					if (string_.contains(squirrel.trim().toUpperCase())) {
						string = string_;
						System.out.println("Found! The address of this acorn is (street,avenue) : (" + address + ") that belongs to you!");
						deleteLineFromFile(ACCORN_FILE, string);
						break;
					} else {
						stealList.add(string_.split(";")[0]);
						continue;
					}
				}
			}
			if(string==null) {
				System.out.println("Sorry, you have no acorns of this type.");
			} 
			if (stealList.size()>0) {
				System.out.println("However, you may steal an acorn of this type, but you have to fight! Would you like to fight the owner of this acorn?");
				if(acceptInput().trim().toUpperCase().equalsIgnoreCase("YES")) {
					System.out.println("Unsupported :( ran out of time");
				} else {
					System.out.println("No acorns for you.");
				}
			}
		} else if (input.trim().equalsIgnoreCase("3")) {
			ArrayList<String> strings = readFile(ACCORN_FILE);
			int count=0;
			for (String string_ : strings) {
				if (string_.contains(squirrel)) {
					String address = string_.split(";")[0] + "->" +  string_.split(";")[1] ;
					System.out.println(address);
					count++;
				}
			}
			System.out.println("Found " + count + " acorns!");
		} else {
			System.out.println("unsupported input.");
		}

	}

	private void createFile(String file) {
		String path = file;
		File f = new File(path);

		f.getParentFile().mkdirs();
		try {
			f.createNewFile();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private ArrayList<String> readFile(String file) {
		ArrayList<String> list = new ArrayList<>();
		BufferedReader br = null;
		try {
			br = new BufferedReader(new FileReader(file));
			String line = br.readLine();
			list.add(line);
			while (line != null) {

				line = br.readLine();
				list.add(line);
			}
			list.remove(list.size() - 1);
			return list;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} finally {
			try {
				br.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	private void appendToFile(String file, String input) {

		BufferedWriter bw = null;

		try {
			// APPEND MODE SET HERE
			bw = new BufferedWriter(new FileWriter(file, true));
			bw.write(input);
			bw.newLine();
			bw.flush();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		} finally { // always close the file
			if (bw != null)
				try {
					bw.close();
				} catch (IOException ioe2) {
				}
		}

	} // end test()

	private String acceptInput() {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.print(">");
		try {
			return br.readLine();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	private void deleteLineFromFile(String filename, String lineToRemove) {
		File inputFile = new File(filename);
		File tempFile = new File("home/squirrel/myTempFile.txt");
		if (!tempFile.exists()) {
			createFile("home/squirrel/myTempFile.txt");
		}

		try {
			BufferedReader reader = new BufferedReader(new FileReader(inputFile));
			BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

			String currentLine;

			while ((currentLine = reader.readLine()) != null) {
				// trim newline when comparing with lineToRemove
				String trimmedLine = currentLine.trim();
				if (trimmedLine.equals(lineToRemove))
					continue;
				writer.write(currentLine + System.getProperty("line.separator"));
			}
			writer.close();
			reader.close();
			boolean successful = tempFile.renameTo(inputFile);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
